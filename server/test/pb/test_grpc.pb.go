// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: test.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Demo_SayHello_FullMethodName  = "/test.Demo/SayHello"
	Demo_CountDown_FullMethodName = "/test.Demo/CountDown"
	Demo_Sum_FullMethodName       = "/test.Demo/Sum"
	Demo_Chat_FullMethodName      = "/test.Demo/Chat"
	Demo_Health_FullMethodName    = "/test.Demo/Health"
)

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoClient interface {
	// 1) Unary：最基础的请求-响应
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 2) Server streaming：服务端流式把倒计时发回去
	CountDown(ctx context.Context, in *CountDownRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CountDownReply], error)
	// 3) Client streaming：客户端连续发数字，服务端汇总
	Sum(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SumRequest, SumReply], error)
	// 4) Bidirectional streaming：简易聊天室
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error)
	// 5) 简易健康检查（避免额外引入官方 health proto）
	Health(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Demo_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) CountDown(ctx context.Context, in *CountDownRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CountDownReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[0], Demo_CountDown_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CountDownRequest, CountDownReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_CountDownClient = grpc.ServerStreamingClient[CountDownReply]

func (c *demoClient) Sum(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SumRequest, SumReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[1], Demo_Sum_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SumRequest, SumReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_SumClient = grpc.ClientStreamingClient[SumRequest, SumReply]

func (c *demoClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[2], Demo_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_ChatClient = grpc.BidiStreamingClient[ChatMessage, ChatMessage]

func (c *demoClient) Health(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Demo_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoServer is the server API for Demo service.
// All implementations must embed UnimplementedDemoServer
// for forward compatibility.
type DemoServer interface {
	// 1) Unary：最基础的请求-响应
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// 2) Server streaming：服务端流式把倒计时发回去
	CountDown(*CountDownRequest, grpc.ServerStreamingServer[CountDownReply]) error
	// 3) Client streaming：客户端连续发数字，服务端汇总
	Sum(grpc.ClientStreamingServer[SumRequest, SumReply]) error
	// 4) Bidirectional streaming：简易聊天室
	Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error
	// 5) 简易健康检查（避免额外引入官方 health proto）
	Health(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedDemoServer()
}

// UnimplementedDemoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDemoServer struct{}

func (UnimplementedDemoServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedDemoServer) CountDown(*CountDownRequest, grpc.ServerStreamingServer[CountDownReply]) error {
	return status.Errorf(codes.Unimplemented, "method CountDown not implemented")
}
func (UnimplementedDemoServer) Sum(grpc.ClientStreamingServer[SumRequest, SumReply]) error {
	return status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedDemoServer) Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedDemoServer) Health(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedDemoServer) mustEmbedUnimplementedDemoServer() {}
func (UnimplementedDemoServer) testEmbeddedByValue()              {}

// UnsafeDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServer will
// result in compilation errors.
type UnsafeDemoServer interface {
	mustEmbedUnimplementedDemoServer()
}

func RegisterDemoServer(s grpc.ServiceRegistrar, srv DemoServer) {
	// If the following call pancis, it indicates UnimplementedDemoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Demo_ServiceDesc, srv)
}

func _Demo_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demo_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_CountDown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountDownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).CountDown(m, &grpc.GenericServerStream[CountDownRequest, CountDownReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_CountDownServer = grpc.ServerStreamingServer[CountDownReply]

func _Demo_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).Sum(&grpc.GenericServerStream[SumRequest, SumReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_SumServer = grpc.ClientStreamingServer[SumRequest, SumReply]

func _Demo_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).Chat(&grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Demo_ChatServer = grpc.BidiStreamingServer[ChatMessage, ChatMessage]

func _Demo_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demo_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Health(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Demo_ServiceDesc is the grpc.ServiceDesc for Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Demo_SayHello_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Demo_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CountDown",
			Handler:       _Demo_CountDown_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sum",
			Handler:       _Demo_Sum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Demo_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

syntax = "proto3";

package test;

// 按你的仓库路径修改 go_package
option go_package = "./pb;pb";

// -------- Service 定义 --------

service Demo {
  // 1) Unary：最基础的请求-响应
  rpc SayHello(HelloRequest) returns (HelloReply);

  // 2) Server streaming：服务端流式把倒计时发回去
  rpc CountDown(CountDownRequest) returns (stream CountDownReply);

  // 3) Client streaming：客户端连续发数字，服务端汇总
  rpc Sum(stream SumRequest) returns (SumReply);

  // 4) Bidirectional streaming：简易聊天室
  rpc Chat(stream ChatMessage) returns (stream ChatMessage);

  // 5) 简易健康检查（避免额外引入官方 health proto）
  rpc Health(HealthCheckRequest) returns (HealthCheckResponse);
}

// -------- Messages --------

// ========== SayHello ==========
message HelloRequest {
  string name = 1;                       // 测试字符串
  map<string, string> meta = 2;          // 测试 map
}

message HelloReply {
  string message = 1;
  int64  ts_unix = 2;                    // 服务器时间戳
}

// ========== CountDown ==========
message CountDownRequest {
  int32 from = 1;                        // 例如 from=5 -> 5,4,3,2,1
  int32 interval_ms = 2;                 // 两次下发间隔，默认可由服务端设定
}

message CountDownReply {
  int32 current = 1;                     // 当前数字
  int64 ts_unix = 2;
}

// ========== Sum（Client streaming）==========
message SumRequest {
  int64 value = 1;                       // 客户端不断发送的数字
}

message SumReply {
  int64 total = 1;                       // 服务器汇总总和
  int32 count = 2;                       // 接收了多少个包
}

// ========== Chat（Bidirectional streaming）==========
message ChatMessage {
  string from = 1;                       // 发送者 ID/昵称
  string text = 2;                       // 文本内容
  int64  seq  = 3;                       // 自增序号（客户端或服务端维护均可）
  int64  ts_unix = 4;                    // 发送时间
}

// ========== Health ==========
message HealthCheckRequest {
  string service = 1;                    // 可传具体服务名，空表示默认
}

message HealthCheckResponse {
  enum Status {
    UNKNOWN     = 0;
    SERVING     = 1;
    NOT_SERVING = 2;
  }
  Status status = 1;
}
